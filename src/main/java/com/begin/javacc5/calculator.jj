options {
    STATIC = false ;
//    OUTPUT_DIRECTORY = "com.begin.javacc5";
}
PARSER_BEGIN(Calculator)
    import java.io.PrintStream ;
    class Calculator {
        public static void main( String[] args )
            throws ParseException, TokenMgrError, NumberFormatException {
            Calculator parser = new Calculator( System.in ) ;
            parser.Start( System.out ) ;
        }
        double previousValue = 0.0 ;
    }
PARSER_END(Calculator)


SKIP : { " " }
TOKEN : { < EOL : "\n" | "\r" | "\r\n" > }
TOKEN : { < PLUS : "+" > }
TOKEN : { < MINUS : "-" > }
TOKEN : { < TIMES : "*" > }
TOKEN : { < DIVIDE : "/" > }
TOKEN : { < LC : "(" > }
TOKEN : { < RC : ")" > }
TOKEN : { < PREVIOUS : "$" > }
TOKEN : { < NUMBER : <DIGITS>
                   | <DIGITS> "." <DIGITS>
                   | <DIGITS> "."
                   | "."<DIGITS> >
        }
TOKEN : { < #DIGITS : (["0"-"9"])+ > }

// 支持IF
TOKEN : {

    < IF : "if">
}

TOKEN :
{
	< LT:"<"  >
  | < LE:"<=" >
  | < GT:">"  >
  | < GE:">=" >
  | < EQ:"==" >
  | < NE:"!=" >
}

TOKEN :
{
    <LB : "{">
   |<RB : "}">
}

TOKEN :
{
    <DOT : ",">
}

// 支持function
TOKEN :
{
    <#LETTER: ["A"-"Z", "a"-"z"]>
}

TOKEN :
{
    <VAR: "[" (<LETTER> | <DIGITS>)* "]">
}

TOKEN :
{
    <FUN : <LETTER> (<LETTER> | <DIGITS> | "_" )* >
}

FunCall Start(PrintStream printStream) throws NumberFormatException :
{
    FunCall value;
}
{
    value = Function()
    <EOL>
    {
        return value;
    }
}

FunCall Function():
{
    Object val;
    FunCall call = new FunCall();
}
{
call.fun = <FUN>
    <LC>
        (
            val = <NUMBER>
           |val = <VAR>
           |val = Function()
        )
        {call.args.add(val);}
        (
            <DOT>
           (
            val = <NUMBER>
           |val = <VAR>
           |val = Function()
           )
            {call.args.add(val);}
        )*
    <RC>
    {
        return call;
    }
}
