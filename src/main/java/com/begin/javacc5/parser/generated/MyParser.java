/* Generated By:JavaCC: Do not edit this line. MyParser.java */
    package com.begin.javacc5.parser.generated;

    import com.begin.javacc5.parser.*;
    import com.begin.javacc5.parser.exp.*;

    public class MyParser implements MyParserConstants {
        public static void main( String[] args )
            throws ParseException, TokenMgrError, NumberFormatException {
            MyParser parser = new MyParser( System.in ) ;
            Exp exp = parser.start();
        }

        private static final String DQ = '"' + "";

        private static String stripQuotes(
            String s, String prefix, String suffix) {
            assert s.startsWith(prefix) && s.endsWith(suffix);
            s = s.substring(prefix.length(), s.length() - suffix.length());
            return s;
        }

  final public Exp start() throws ParseException, NumberFormatException {
    Exp exp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
    case LC:
    case NUMBER:
    case SINGLE_QUOTED_STRING:
    case DOUBLE_QUOTED_STRING:
    case VAR:
    case FUN:
      exp = expression();
      break;
    case IF:
      exp = ifStatement();
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(EOL);
        {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Exp function() throws ParseException {
    String name;
    java.util.List<Exp> args = new java.util.ArrayList<Exp>();
    Exp exp;
    jj_consume_token(FUN);
            name = token.image;
    jj_consume_token(LC);
    exp = expression();
            args.add(exp);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      jj_consume_token(COMMA);
      exp = expression();
                args.add(exp);
    }
    jj_consume_token(RC);
        {if (true) return new UnresolvedExp(name, args);}
    throw new Error("Missing return statement in function");
  }

  final public Exp ifStatement() throws ParseException {
    Exp exp;
    java.util.List<Exp> args = new java.util.ArrayList<Exp>();
    jj_consume_token(IF);
    jj_consume_token(LC);
    exp = expression();
               args.add(exp);
    jj_consume_token(RC);
    jj_consume_token(LB);
    exp = expression();
           args.add(exp);
    jj_consume_token(RB);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSEIF:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      jj_consume_token(ELSEIF);
      jj_consume_token(LC);
      exp = expression();
                    args.add(exp);
      jj_consume_token(RC);
      jj_consume_token(LB);
      exp = expression();
                args.add(exp);
      jj_consume_token(RB);
    }
    jj_consume_token(ELSE);
    jj_consume_token(LB);
    exp = expression();
               args.add(exp);
    jj_consume_token(RB);
       {if (true) return new UnresolvedExp("IF", Syntax.IF, args);}
    throw new Error("Missing return statement in function");
  }

  final public Exp expression() throws ParseException {
    Exp exp, exp2;
    exp = term2();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
    case LE:
    case GT:
    case GE:
    case EQ:
    case NE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        jj_consume_token(LT);
        exp2 = term2();
                {if (true) return new UnresolvedExp("<", Syntax.Infix, new Exp[]{exp, exp2});}
        break;
      case LE:
        jj_consume_token(LE);
        exp2 = term2();
                {if (true) return new UnresolvedExp("<=", Syntax.Infix, new Exp[]{exp, exp2});}
        break;
      case GT:
        jj_consume_token(GT);
        exp2 = term2();
                {if (true) return new UnresolvedExp(">", Syntax.Infix, new Exp[]{exp, exp2});}
        break;
      case GE:
        jj_consume_token(GE);
        exp2 = term2();
                {if (true) return new UnresolvedExp(">=", Syntax.Infix, new Exp[]{exp, exp2});}
        break;
      case EQ:
        jj_consume_token(EQ);
        exp2 = term2();
                {if (true) return new UnresolvedExp("==", Syntax.Infix, new Exp[]{exp, exp2});}
        break;
      case NE:
        jj_consume_token(NE);
        exp2 = term2();
                {if (true) return new UnresolvedExp("!=", Syntax.Infix, new Exp[]{exp, exp2});}
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
        {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Exp term2() throws ParseException {
    Exp exp, exp2;
    exp = term();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        exp2 = term();
            exp = new UnresolvedExp("+", Syntax.Infix, new Exp[]{exp, exp2});
        break;
      case MINUS:
        jj_consume_token(MINUS);
        exp2 = term();
            exp = new UnresolvedExp("-", Syntax.Infix, new Exp[]{exp, exp2});
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return exp ;}
    throw new Error("Missing return statement in function");
  }

  final public Exp term() throws ParseException {
    Exp exp, exp2;
    exp = factor();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMES:
      case DIVIDE:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMES:
        jj_consume_token(TIMES);
        exp2 = factor();
            exp = new UnresolvedExp("*", Syntax.Infix, new Exp[]{exp, exp2});
        break;
      case DIVIDE:
        jj_consume_token(DIVIDE);
        exp2 = factor();
            exp = new UnresolvedExp("/", Syntax.Infix, new Exp[]{exp, exp2});
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return exp ;}
    throw new Error("Missing return statement in function");
  }

  final public Exp factor() throws ParseException {
    Exp exp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LC:
    case NUMBER:
    case SINGLE_QUOTED_STRING:
    case DOUBLE_QUOTED_STRING:
    case VAR:
    case FUN:
      exp = primary();
        {if (true) return exp;}
      break;
    case PLUS:
      jj_consume_token(PLUS);
      exp = primary();
        {if (true) return exp;}
      break;
    case MINUS:
      jj_consume_token(MINUS);
      exp = primary();
        {if (true) return new UnresolvedExp("-", Syntax.Prefix, new Exp[] {exp});}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp primary() throws ParseException {
    Exp exp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      jj_consume_token(NUMBER);
        {if (true) return LiteralExp.createNumber(token.image);}
      break;
    case SINGLE_QUOTED_STRING:
      jj_consume_token(SINGLE_QUOTED_STRING);
        {if (true) return LiteralExp.createString(stripQuotes(token.image, "'", "'"));}
      break;
    case DOUBLE_QUOTED_STRING:
      jj_consume_token(DOUBLE_QUOTED_STRING);
        {if (true) return LiteralExp.createString(stripQuotes(token.image, DQ, DQ));}
      break;
    case VAR:
      jj_consume_token(VAR);
        {if (true) return new UnresolvedExp(token.image, Syntax.Var, new Exp[0]);}
      break;
    case LC:
      jj_consume_token(LC);
      exp = expression();
      jj_consume_token(RC);
        {if (true) return exp;}
      break;
    case FUN:
      exp = function();
        {if (true) return exp;}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public MyParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[11];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1801c298,0x2000,0x20000,0x3f00000,0x3f00000,0x18,0x18,0x60,0x60,0x1800c298,0x1800c280,};
   }

  /** Constructor with InputStream. */
  public MyParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MyParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MyParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MyParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MyParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MyParser(MyParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MyParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[29];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 11; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 29; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

    }
