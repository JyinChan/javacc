options {
    STATIC = false ;
    OUTPUT_DIRECTORY = "generated";
}
PARSER_BEGIN(MyParser)

    package com.begin.javacc5.parser.generated;

    import com.begin.javacc5.parser.*;
    import com.begin.javacc5.parser.exp.*;

    public class MyParser {
        public static void main( String[] args )
            throws ParseException, TokenMgrError, NumberFormatException {
            MyParser parser = new MyParser( System.in ) ;
            Exp exp = parser.start();
        }

        private static final String DQ = '"' + "";

        private static String stripQuotes(
            String s, String prefix, String suffix) {
            assert s.startsWith(prefix) && s.endsWith(suffix);
            s = s.substring(prefix.length(), s.length() - suffix.length());
            return s;
        }
    }
PARSER_END(MyParser)


SKIP : { " " }
TOKEN : { < EOL : "\n" | "\r" | "\r\n" > }
TOKEN : { < PLUS : "+" > }
TOKEN : { < MINUS : "-" > }
TOKEN : { < TIMES : "*" > }
TOKEN : { < DIVIDE : "/" > }
TOKEN : { < LC : "(" > }
TOKEN : { < RC : ")" > }
TOKEN : { < NUMBER : <DIGITS>
                   | <DIGITS> "." <DIGITS>
                   | <DIGITS> "."
                   | "."<DIGITS> >
        }
TOKEN : { < #DIGITS : (["0"-"9"])+ > }

TOKEN :
{
    <LB : "{">
   |<RB : "}">
}

TOKEN : { <COMMA : ","> }

TOKEN : {
    < SINGLE_QUOTED_STRING: "'" ( (~["'"]) | ("''"))* "'" >
    |
    < DOUBLE_QUOTED_STRING: "\"" ( (~["\""]) | ("\"\""))* "\"" >
}

// 支持IF
TOKEN : {
    < IF : "if"|"IF">
   |
    < ELSEIF : "elseif"|"ELSEIF">
   |
    < ELSE : "else"|"ELSE">
   |
    < END : "end"|"END">
}

TOKEN :
{
	< LT:"<"  >
  | < LE:"<=" >
  | < GT:">"  >
  | < GE:">=" >
  | < EQ:"==" >
  | < NE:"!=" >
}

// 支持function
TOKEN :
{
    <#LETTER: ["A"-"Z", "a"-"z"]>
   |
    <VAR: "[" (
            (~["]","\n","\r"])
          | ("]]")
        )* "]">
   |
    <FUN : <LETTER> (<LETTER> | <DIGITS> | "_" )* >
}

Exp start() throws NumberFormatException :
{
    Exp exp;
}
{
    (
        exp = expression()
       |
        exp = ifStatement()
    )
    <EOL>
    {
        return exp;
    }
}

Exp function():
{
    String name;
    java.util.List<Exp> args = new java.util.ArrayList<Exp>();
    Exp exp;
}
{
    <FUN>
        {
            name = token.image;
        }
    <LC>
        exp = expression() {
            args.add(exp);
        }
        (
            <COMMA>
            exp = expression() {
                args.add(exp);
            }
        )*
    <RC>
    {
        return new UnresolvedExp(name, args);
    }
}

Exp ifStatement():
{
    Exp exp;
    java.util.List<Exp> args = new java.util.ArrayList<Exp>();
}
{

   <IF>
       <LC>
           exp = expression() {
               args.add(exp);
           }
       <RC>
   <LB>
       exp = expression() {
           args.add(exp);
       }
   <RB>
   (
        <ELSEIF>
            <LC>
                exp = expression() {
                    args.add(exp);
                }
            <RC>
        <LB>
            exp = expression() {
                args.add(exp);
            }
        <RB>
   )*
   <ELSE>
       <LB>
           exp = expression() {
               args.add(exp);
           }
       <RB>
//   <END>
   {
       return new UnresolvedExp("IF", Syntax.IF, args);
   }
}

Exp expression():
{
    Exp exp, exp2;
}
{
    exp = term2()
    (
        < LT>
            exp2 = term2() {
                return new UnresolvedExp("<", Syntax.Infix, new Exp[]{exp, exp2});
            }
       |
        < LE>
            exp2 = term2() {
                return new UnresolvedExp("<=", Syntax.Infix, new Exp[]{exp, exp2});
            }
       |
        < GT>
            exp2 = term2() {
                return new UnresolvedExp(">", Syntax.Infix, new Exp[]{exp, exp2});
            }
       |
        < GE>
            exp2 = term2() {
                return new UnresolvedExp(">=", Syntax.Infix, new Exp[]{exp, exp2});
            }
       |
        < EQ>
            exp2 = term2() {
                return new UnresolvedExp("==", Syntax.Infix, new Exp[]{exp, exp2});
            }
       |
        < NE>
            exp2 = term2() {
                return new UnresolvedExp("!=", Syntax.Infix, new Exp[]{exp, exp2});
            }
    )?
    {
        return exp;
    }
}

Exp term2():
{
    Exp exp, exp2;
}
{
    exp = term()
    (
        <PLUS> exp2 = term() {
            exp = new UnresolvedExp("+", Syntax.Infix, new Exp[]{exp, exp2});
        }
       |
        <MINUS> exp2 = term() {
            exp = new UnresolvedExp("-", Syntax.Infix, new Exp[]{exp, exp2});
        }
    )*
    { return exp ; }
}

Exp term():
{
    Exp exp, exp2;
}
{
    exp = factor()
    (
        <TIMES> exp2 = factor() {
            exp = new UnresolvedExp("*", Syntax.Infix, new Exp[]{exp, exp2});
        }
       |
        <DIVIDE> exp2 = factor() {
            exp = new UnresolvedExp("/", Syntax.Infix, new Exp[]{exp, exp2});
        }
    )*
    { return exp ; }
}

Exp factor() :
{
    Exp exp;
}
{
    exp = primary() {
        return exp;
    }
   |
    <PLUS> exp = primary() {
        return exp;
    }
   |
    <MINUS> exp = primary() {
        return new UnresolvedExp("-", Syntax.Prefix, new Exp[] {exp});
    }
}

Exp primary():
{
    Exp exp;
}
{

    <NUMBER> {
        return LiteralExp.createNumber(token.image);
    }
   |
    <SINGLE_QUOTED_STRING> {
        return LiteralExp.createString(stripQuotes(token.image, "'", "'"));
    }
   |
    <DOUBLE_QUOTED_STRING> {
        return LiteralExp.createString(stripQuotes(token.image, DQ, DQ));
    }
   |
    <VAR> {
        return new UnresolvedExp(token.image, Syntax.Var, new Exp[0]);
    }
   |
    <LC> exp = expression() <RC> {
        return exp;
    }
   |
    exp = function() {
        return exp;
    }

}
